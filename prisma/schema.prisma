// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("postgresql://postgres:Gorakhpur%40123%23@db.kdlwxtjtonjckrtaepdr.supabase.co:5432/postgres")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String
  image         String?
  bio           String?
  role          Role      @default(USER)
  status        UserStatus @default(ACTIVE)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  posts         Post[]
  comments      Comment[]
  likes         Like[]
}

enum Role {
  ADMIN
  USER
}

enum UserStatus {
  ACTIVE
  BLOCKED
}

model Post {
  id            String    @id @default(cuid())
  title         String
  slug          String    @unique
  content       String
  excerpt       String?
  published     Boolean   @default(false)
  featuredImage String?
  readTime      Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  author        User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId      String
  category      Category  @relation(fields: [categoryId], references: [id])
  categoryId    String
  tags          Tag[]
  comments      Comment[]
  likes         Like[]
}

model Category {
  id            String    @id @default(cuid())
  name          String    @unique
  slug          String    @unique
  posts         Post[]
}

model Tag {
  id            String    @id @default(cuid())
  name          String    @unique
  slug          String    @unique
  posts         Post[]
}

model Comment {
  id            String    @id @default(cuid())
  content       String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  author        User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId      String
  post          Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId        String
  parentId      String?   // For nested comments
}

model Like {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  post          Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId        String

  @@unique([userId, postId])
}
